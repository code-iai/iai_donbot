<?xml version="1.0"?>
<launch>
  <arg name="standalone" default="true"/>
  
  <!-- robot_ip: IP-address of the robot's socket-messaging server -->
  <arg name="robot_ip" default="192.168.102.95"/>
  <arg name="kinematics_config" default="$(find iai_donbot_description)/config/ur5_calibration.yaml"/>


  <arg name="debug" default="false" doc="Debug flag that will get passed on to ur_control.launch"/>
  <arg name="controller_config_file" default="$(find iai_donbot_bringup)/config/ur5_controllers.yaml" doc="Config file used for defining the ROS-Control controllers."/>
  <arg name="tf_prefix" default="ur5_" doc="tf_prefix used for the robot."/>
  <arg name="controllers" default="joint_state_controller scaled_pos_traj_controller force_torque_sensor_controller speed_scaling_state_controller" doc="Controllers that are activated by default."/>
  <arg name="stopped_controllers" default="pos_traj_controller" doc="Controllers that are initally loaded, but not started."/>
  <arg name="headless_mode" default="false" doc="Automatically send URScript to robot to execute. On e-Series this does require the robot to be in 'remote-control' mode. With this, the URCap is not needed on the robot."/>
  <arg name="robot_description_file" default="$(find ur_description)/launch/ur5_upload.launch" doc="Robot description launch file."/>
  <arg name="limited" default="false" doc="Use the description in limited mode (Every axis rotates from -PI to PI)"/>

  <arg unless="$(arg debug)" name="launch_prefix" value="" />
  <arg     if="$(arg debug)" name="launch_prefix" value="gdb --ex run --args" />
  <arg name="urscript_file" default="$(find ur_robot_driver)/resources/servoj.urscript" doc="Path to URScript that will be sent to the robot and that forms the main control program."/>
  <arg name="rtde_output_recipe_file" default="$(find ur_robot_driver)/resources/rtde_output_recipe.txt" doc="Recipe file used for the RTDE-outputs. Only change this if you know what you're doing."/>
  <arg name="rtde_input_recipe_file" default="$(find ur_robot_driver)/resources/rtde_input_recipe.txt" doc="Recipe file used for the RTDE-inputs. Only change this if you know what you're doing."/>

  <arg name="max_velocity" default="10.0"/> <!-- [rad/s] -->

  <group if="$(eval arg('standalone') == true)">
    <include file="$(arg robot_description_file)">
      <arg name="limited" value="$(arg limited)"/>`
      <arg name="kinematics_config" value="$(arg kinematics_config)"/>
    </include>

    <!-- Convert joint states to /tf tranforms -->
    <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher"/>

    <node pkg="joint_state_publisher" type="joint_state_publisher" name="joint_state_publisher" output="screen">
      <rosparam param="source_list">
        - arm/joint_states
      </rosparam>

      <param name="rate" value="120"/>
      <param name="use_gui" value="False"/>

    </node>
  </group>

  <!-- driver -->
  <node name="ur_hardware_interface" pkg="ur_robot_driver" type="ur_robot_driver_node" output="screen" launch-prefix="$(arg launch_prefix)" required="true">
    <remap from="joint_states" to="arm/joint_states"/>
    <param name="robot_ip" type="str" value="$(arg robot_ip)"/>
    <rosparam command="load" file="$(arg kinematics_config)" />
    <param name="script_file" value="$(arg urscript_file)"/>
    <param name="output_recipe_file" value="$(arg rtde_output_recipe_file)"/>
    <param name="input_recipe_file" value="$(arg rtde_input_recipe_file)"/>
    <param name="headless_mode" value="$(arg headless_mode)"/>
    <param name="tf_prefix" value="$(arg tf_prefix)"/>
    <param name="use_tool_communication" value="false"/>
    <!--<param name="reverse_port" type="int" value="$(arg reverse_port)" />-->
  </node>

  <!-- Load controller settings -->
  <rosparam file="$(arg controller_config_file)" command="load"/>

  <!-- spawn controller manager -->
  <node name="ros_control_controller_spawner" pkg="controller_manager" type="spawner" respawn="false"
    output="screen" args="$(arg controllers)" />

  <!-- load other controller -->
  <node name="ros_control_controller_manager" pkg="controller_manager" type="controller_manager" respawn="false"
    output="screen" args="load $(arg stopped_controllers)" />


  <node name="controller_stopper" pkg="controller_stopper" type="node" respawn="false" output="screen">
    <remap from="robot_running" to="ur_hardware_interface/robot_program_running"/>
    <rosparam param="consistent_controllers">
       - "joint_state_controller"
       - "speed_scaling_state_controller"
       - "force_torque_sensor_controller"
    </rosparam>
  </node>

</launch>
